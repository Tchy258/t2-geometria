set(PROJECT_INCLUDE_DIR ${PROJECT_SOURCE_DIR}/include)

add_library(punto STATIC punto.cpp)
target_include_directories(punto PUBLIC ${PROJECT_INCLUDE_DIR})

add_library(vector STATIC vector.cpp)
target_include_directories(vector PUBLIC ${PROJECT_INCLUDE_DIR})
target_link_libraries(vector PUBLIC punto)

add_library(poligono STATIC poligono.cpp)
target_include_directories(poligono PUBLIC ${PROJECT_INCLUDE_DIR})
target_link_libraries(poligono PUBLIC vector)


add_executable(Tarea2 main.cpp)
target_link_libraries(Tarea2 PRIVATE poligono)

add_subdirectory(generators)
add_subdirectory(hull_strategies)
add_subdirectory(performance_testers)

if (CMAKE_BUILD_TYPE STREQUAL "Debug")
    target_compile_options(punto PRIVATE --coverage)
    target_link_options(punto PRIVATE --coverage)
    target_compile_options(vector PRIVATE --coverage)
    target_link_options(vector PRIVATE --coverage)
    target_compile_options(poligono PRIVATE --coverage)
    target_link_options(poligono PRIVATE --coverage)
    target_compile_options(gift_wrapping_strategy PRIVATE --coverage)
    target_link_options(gift_wrapping_strategy PRIVATE --coverage)
    target_compile_options(divide_and_conquer_strategy PRIVATE --coverage)
    target_link_options(divide_and_conquer_strategy PRIVATE --coverage)
    target_compile_options(hull_tester PRIVATE --coverage)
    target_link_options(hull_tester PRIVATE --coverage)
    target_compile_options(Tarea2 PRIVATE --coverage)
    target_link_options(Tarea2 PRIVATE --coverage)
    target_compile_options(IntegerHullTest PRIVATE --coverage)
    target_link_options(IntegerHullTest PRIVATE --coverage)
    target_compile_options(LLHullTest PRIVATE --coverage)
    target_link_options(LLHullTest PRIVATE --coverage)
    target_compile_options(DoubleHullTest PRIVATE --coverage)
    target_link_options(DoubleHullTest PRIVATE --coverage)
    target_compile_options(FloatHullTest PRIVATE --coverage)
    target_link_options(FloatHullTest PRIVATE --coverage)
    target_compile_options(IntegerRandomTest PRIVATE --coverage)
    target_link_options(IntegerRandomTest PRIVATE --coverage)
    target_compile_options(LLRandomTest PRIVATE --coverage)
    target_link_options(LLRandomTest PRIVATE --coverage)
    target_compile_options(DoubleRandomTest PRIVATE --coverage)
    target_link_options(DoubleRandomTest PRIVATE --coverage)
    target_compile_options(FloatRandomTest PRIVATE --coverage)
    target_link_options(FloatRandomTest PRIVATE --coverage)
    target_compile_options(IntegerAtLeastThreeColinearTest PRIVATE --coverage)
    target_link_options(IntegerAtLeastThreeColinearTest PRIVATE --coverage)
    target_compile_options(LLAtLeastThreeColinearTest PRIVATE --coverage)
    target_link_options(LLAtLeastThreeColinearTest PRIVATE --coverage)
    target_compile_options(DoubleAtLeastThreeColinearTest PRIVATE --coverage)
    target_link_options(DoubleAtLeastThreeColinearTest PRIVATE --coverage)
    target_compile_options(FloatAtLeastThreeColinearTest PRIVATE --coverage)
    target_link_options(FloatAtLeastThreeColinearTest PRIVATE --coverage)
    target_compile_options(IntegerNonColinearTest PRIVATE --coverage)
    target_link_options(IntegerNonColinearTest PRIVATE --coverage)
    target_compile_options(LLNonColinearTest PRIVATE --coverage)
    target_link_options(LLNonColinearTest PRIVATE --coverage)
    target_compile_options(DoubleNonColinearTest PRIVATE --coverage)
    target_link_options(DoubleNonColinearTest PRIVATE --coverage)
    target_compile_options(FloatNonColinearTest PRIVATE --coverage)
    target_link_options(FloatNonColinearTest PRIVATE --coverage)
endif()